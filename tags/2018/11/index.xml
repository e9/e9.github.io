<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2018/11 on e9.github.io</title>
    <link>https://e9.github.io/tags/2018/11/</link>
    <description>Recent content in 2018/11 on e9.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 20 Nov 2018 20:07:07 +0900</lastBuildDate>
    
	<atom:link href="https://e9.github.io/tags/2018/11/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>expectedとactualの順序</title>
      <link>https://e9.github.io/posts/1542712026/</link>
      <pubDate>Tue, 20 Nov 2018 20:07:07 +0900</pubDate>
      
      <guid>https://e9.github.io/posts/1542712026/</guid>
      <description>assert_equalの引数は、だいたいの言語ではexpectedが先で
 http://test-unit.github.io/test-unit/en/Test/Unit/Assertions.html#assert_equal-instance_method https://phpunit.de/manual/6.5/en/appendixes.assertions.html#appendixes.assertions.assertEquals http://junit.sourceforge.net/javadoc/org/junit/Assert.html#assertEquals(double,%20double)  めずらしくnodeはactualが先なんだけど
 https://nodejs.org/api/assert.html#assert_assert_equal_actual_expected_message  Pythonはfirstとsecondになっていて、すごい割り切り方だと思った。
 https://docs.python.jp/3/library/unittest.html#unittest.TestCase.assertEqual  </description>
    </item>
    
    <item>
      <title>Create React AppのdistをRailsのassetsで使いたい</title>
      <link>https://e9.github.io/posts/1541765899/</link>
      <pubDate>Fri, 09 Nov 2018 21:18:20 +0900</pubDate>
      
      <guid>https://e9.github.io/posts/1541765899/</guid>
      <description>数年放置したRailsプロジェクトのフロントエンドをどうにかしたくなったので、手っ取り早くfrontendディレクトリの中で create-react-appして、その成果物をRailsのアセットパイプラインから参照することにした。
Rails.application.config.assets.paths &amp;lt;&amp;lt; Rails.root.join(&#39;frontend&#39;)  //= require_tree ./../../../frontend/build/static/js  //= require_tree ./../../../frontend/build/static/css  雑だけど、とりあえずまあこれで動いた。
数年放置したプロジェクトだけあってRails4系なので、Rails5だとちょっと違うかもしれないけど 、今回の話の本質はそこではない。
問題はCSSが参照している画像だ。
アセットパイプラインを通すと画像のファイル名にフィンガープリントがつく。RailsでCSSに画像のパスを記述するときはimage-urlやasset-urlといったヘルパを使うことになっている。今回のCSSはcreate-react-appが自動生成しており、これはちょっと大変そうだ。
create-react-appが書き出した画像をpublic下に置く手もあるが、ここではすべての画像をCSSの中にData URI schemeで埋め込んでみることにする。create-react-appは標準で、小さな画像ならCSSの中に埋め込んでいるからだ。それがここ。
 https://github.com/facebook/create-react-app/blob/30ee52c/packages/react-scripts/config/webpack.config.js#L336-L343  limitが10000なので10KBまでの画像なら埋め込まれる設定になっている。したがって、このlimitを増やせれば、画像をすべてCSSの中に埋め込むことができる。
といってもこのwebpack.config.jsはcreate-react-appの中に隠蔽されていて、手を入れるには普通はejectするしかない。しかしせっかくcreate-react-appを使っているのにejectはしたくない。そこでreact-app-rewiredを使うことにしよう。
 https://github.com/timarney/react-app-rewired  READMEにCRA2.0はサポートしていないと書いてあるけど、limitを書き換えるくらいなら問題なく使えた。
 https://github.com/timarney/react-app-rewired/blob/74480b2/README.md  だいたいこんな感じ。
const rewired = require(&amp;quot;react-app-rewired&amp;quot;) module.exports = { webpack: function(config, env) { const loader = rewired.getLoader( config.module.rules, rule =&amp;gt; rule.test &amp;amp;&amp;amp; String(rule.test) === String([/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/]) ) loader.options.limit = 500000 return config } }  とりあえず今回使っている画像は最大でも300KB程度だったので、limitを500KBまで増やすことで無事にすべての画像をCSSに埋め込むことができた。そのおかげでCSSファイルだけで1MBになっちゃったけど。</description>
    </item>
    
  </channel>
</rss>