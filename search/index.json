[{"content":"単純に実装すると、webworkerの中からwasmはimportできない。エラーメッセージでググれば同じ轍を踏んだ先人が何人も見つかる。\n https://github.com/webpack/webpack/issues/7647 https://www.mizdra.net/entry/2018/10/17/080000 https://imasanari.github.io/blog/wasm-bindgen-with-worker/  craをejectすれば解決はできるんだけど、信条としてそれはやりたくない。じゃあどうすればいいのかというと、worker-loaderでもcomlink-loaderでもreact-app-rewire-multiple-entryでもなく、worker-pluginを使うのが正解だ。（これにたどり着くのに2日くらいかかった）\n https://github.com/GoogleChromeLabs/worker-plugin  customize-craを入れて\nconst path = require('path'); const { override, addWebpackPlugin } = require('customize-cra'); const WorkerPlugin = require('worker-plugin'); module.exports = override( addWebpackPlugin(new WorkerPlugin()), config =\u0026gt; { const wasmExtensionRegExp = /.wasm$/; config.resolve.extensions.push('.wasm'); config.module.rules.forEach(rule =\u0026gt; { (rule.oneOf || []).forEach(oneOf =\u0026gt; { if (oneOf.loader \u0026amp;\u0026amp; oneOf.loader.indexOf('file-loader') \u0026gt;= 0) { oneOf.exclude.push(wasmExtensionRegExp); } }); }); config.module.rules.push({ test: wasmExtensionRegExp, include: path.resolve(__dirname, 'src'), use: [{ loader: require.resolve('wasm-loader'), options: {} }], }); return config; } );  こうするだけ。\n","date":"2020-04-15","permalink":"https://e9.github.io/posts/1586883947/","tags":null,"title":"create-react-appをejectせずwebworkerからwasmを実行することはできる"},{"content":"gomobileでiOS向けのライブラリを書いている。\n$ gomobile version gomobile version +dc07713 Mon Jan 7 16:22:57 2019 +0000 (android,ios); androidSDK=  package main import \u0026quot;app/x\u0026quot; func main() { x.X() }  package x func X() { }  この関数Xが非同期で動くとして、その結果をメインに返したいとき、セオリーとしてはコールバックの追加だろう。\npackage main import ( \u0026quot;app/x\u0026quot; \u0026quot;log\u0026quot; ) func main() { c := make(chan struct{}, 0) x.X(func() { log.Println(\u0026quot;two\u0026quot;) close(c) }) log.Println(\u0026quot;one\u0026quot;) \u0026lt;-c }  package x import \u0026quot;time\u0026quot; func X(callback func()) { go (func() { time.Sleep(1 * time.Second) callback() })() }  ところがどっこいこの関数はgomobile bindの対象にはならないのだ。\n// skipped function X with unsupported parameter or return types  関数はよくても関数型はだめらしい。\n https://godoc.org/golang.org/x/mobile/cmd/gobind#hdr-Type_restrictions  どうするかというとinterfaceを使う。\npackage x import \u0026quot;time\u0026quot; type I interface { Callback() } func X(p I) { go (func() { time.Sleep(1 * time.Second) p.Callback() })() }  このとき生成されたX.objc.hにはXIプロトコルと共に、同名のクラスが定義されているので\n@protocol XI; @class XI;  Swiftでコールバック用のクラスを実装する場合はXIではなくXIProtocolを継承する必要がある。\nclass Callback: NSObject, XIProtocol {  この罠にうっかりハマって大変だった。\n","date":"2019-01-24","permalink":"https://e9.github.io/posts/1548328800/","tags":null,"title":"gomobileで非同期な関数を扱いたい"},{"content":"Pythonで\nx, y = 1 if true_or_false else 2, 3  というコードを目にした。ぱっと見で\u0008の自分の解釈では\u001fこうなる。\nx, y = (1) if true_or_false else (2, 3)  これはtrue_or_falseがTrueのときにyの値が足りずランタイムエラーになる。\nので、レビューにそう書こうと思ったんだけど、ちゃんと確かめると、実際にはこのように動くらしい。\nx, y = ((1 if true_or_false else 2), 3)  なのでエラーにならない。なるほどー。これは気付きづらい。\nだけど、まあ、普通はこう書きますわな。 \u001f\nx = 1 if true_or_false else 2 y = 3  ","date":"2018-12-04","permalink":"https://e9.github.io/posts/1543931855/","tags":null,"title":"x, y = 1 if True else 2, 3"},{"content":"XとYという2つのウェブサイトを開発している。ユーザーはXでアクションAを起こすと、Yにリダイレクトされ、YでアクションBを起こすと、再びXにリダイレクトで帰ってくる。まあ、単純な話だ。\nだけどそれを普通に作ったら、なぜかはじめにXで張ったセッションが帰ってきたときには消えていて、別のユーザーとして扱われるという不可解なバグに悩まされた。\nセッションを張るというのは、仕組みとしてはセッションIDをクッキーに書き込んでいるだけなので、つまり行って帰ってくるとクッキーが消えるのだ。不思議。\nリクエスト、レスポンスを確認すると、YからXに遷移してXにリクエストを送る際、リクエストヘッダにクッキーが含まれていないことが分かった。つまり消えてるわけではなくて、無視されているのだ。Xはクッキー無しでアクセスしてきた未知のユーザーに新たなセッションIDを作り、レスポンスヘッダでセットクッキーしていた。\nYからXにリダイレクトする方法を、レスポンスヘッダでやったり、HTMLのmetaタグでやったり、JavaScriptのlocation.href書き換えでやったり、リンクを表示して自分でクリックしたりしても、同じ結果だった。唯一セッションが継続するのはリダイレクト先のXのURLを、自分でアドレスバーに貼り付けてアクセスしたときだけ。Refererを見てるのか……？\n解決編。クッキーにはSame Site属性があるんですって。知らなかったー。Xで使ってるフレームワークがデフォルトでSame Siteでクッキーに書き込んでいるのでした。\n","date":"2018-11-30","permalink":"https://e9.github.io/posts/1543580512/","tags":null,"title":"リダイレクトでクッキーが消える"},{"content":"assert_equalの引数は、だいたいの言語ではexpectedが先で\n http://test-unit.github.io/test-unit/en/Test/Unit/Assertions.html#assert_equal-instance_method https://phpunit.de/manual/6.5/en/appendixes.assertions.html#appendixes.assertions.assertEquals http://junit.sourceforge.net/javadoc/org/junit/Assert.html#assertEquals(double,%20double)  めずらしくnodeはactualが先なんだけど\n https://nodejs.org/api/assert.html#assert_assert_equal_actual_expected_message  Pythonはfirstとsecondになっていて、すごい割り切り方だと思った。\n https://docs.python.jp/3/library/unittest.html#unittest.TestCase.assertEqual  ","date":"2018-11-20","permalink":"https://e9.github.io/posts/1542712026/","tags":null,"title":"expectedとactualの順序"},{"content":"数年放置したRailsプロジェクトのフロントエンドをどうにかしたくなったので、手っ取り早くfrontendディレクトリの中で create-react-appして、その成果物をRailsのアセットパイプラインから参照することにした。\nRails.application.config.assets.paths \u0026lt;\u0026lt; Rails.root.join('frontend')  //= require_tree ./../../../frontend/build/static/js  //= require_tree ./../../../frontend/build/static/css  雑だけど、とりあえずまあこれで動いた。\n数年放置したプロジェクトだけあってRails4系なので、Rails5だとちょっと違うかもしれないけど 、今回の話の本質はそこではない。\n問題はCSSが参照している画像だ。\nアセットパイプラインを通すと画像のファイル名にフィンガープリントがつく。RailsでCSSに画像のパスを記述するときはimage-urlやasset-urlといったヘルパを使うことになっている。今回のCSSはcreate-react-appが自動生成しており、これはちょっと大変そうだ。\ncreate-react-appが書き出した画像をpublic下に置く手もあるが、ここではすべての画像をCSSの中にData URI schemeで埋め込んでみることにする。create-react-appは標準で、小さな画像ならCSSの中に埋め込んでいるからだ。それがここ。\n https://github.com/facebook/create-react-app/blob/30ee52c/packages/react-scripts/config/webpack.config.js#L336-L343  limitが10000なので10KBまでの画像なら埋め込まれる設定になっている。したがって、このlimitを増やせれば、画像をすべてCSSの中に埋め込むことができる。\nといってもこのwebpack.config.jsはcreate-react-appの中に隠蔽されていて、手を入れるには普通はejectするしかない。しかしせっかくcreate-react-appを使っているのにejectはしたくない。そこでreact-app-rewiredを使うことにしよう。\n https://github.com/timarney/react-app-rewired  READMEにCRA2.0はサポートしていないと書いてあるけど、limitを書き換えるくらいなら問題なく使えた。\n https://github.com/timarney/react-app-rewired/blob/74480b2/README.md  だいたいこんな感じ。\nconst rewired = require(\u0026quot;react-app-rewired\u0026quot;) module.exports = { webpack: function(config, env) { const loader = rewired.getLoader( config.module.rules, rule =\u0026gt; rule.test \u0026amp;\u0026amp; String(rule.test) === String([/\\.bmp$/, /\\.gif$/, /\\.jpe?g$/, /\\.png$/]) ) loader.options.limit = 500000 return config } }  とりあえず今回使っている画像は最大でも300KB程度だったので、limitを500KBまで増やすことで無事にすべての画像をCSSに埋め込むことができた。そのおかげでCSSファイルだけで1MBになっちゃったけど。\n","date":"2018-11-09","permalink":"https://e9.github.io/posts/1541765899/","tags":null,"title":"Create React AppのdistをRailsのassetsで使いたい"},{"content":"普段は Redis の読み書きなんてフレームワークにまかせていて、オブジェクトならだいたいシリアライズして保存されているわけだけど、今回たまたま Redis を直で使うことがあった。ハッシュ、連想配列、辞書、まあとにかくそんなものを保存したい。\n単純にやるなら JSON 文字列に変換して保存すればいいわけだけど、シリアライズには多少なりとも時間がかかる。そもそも Redis はハッシュが扱えるので、そのままハッシュとして保存すればいいんじゃないか？と思った。\nで、ドキュメントを見たんだけど、Redis のハッシュは O(N)らしいのだ。\n http://redis.shibu.jp/commandreference/hashes.html  うーん、それじゃあ JSON とどっちが速いのかは分からない。\nちゃんと調べた人もいて、それによると JSON の方が速いらしい。まあ、微々たるもんだからどっちでもいいんだけど。\n https://symfoware.blog.fc2.com/blog-entry-1446.html  ","date":"2018-10-31","permalink":"https://e9.github.io/posts/1540982193/","tags":null,"title":"RedisのHGETALLの速さ"},{"content":"Python。dict か list のいずれかが入っている変数に対して、ループで回してある処理をすることになった。\n型が違うのだから違うコードで回すべきだという論もあるだろうが、せっかく LL で書いているのだから、全く同じコードで処理したいところ。\n結局自分はこうした。\nitems = dict_or_list.items() if isinstance(dict_or_list, dict) else enumerate(dict_or_list) for key, value in items: print(key, value)  条件分岐があまり美しくない気がしたけど、より良い方法が思いつかなかった。\nRuby だともうちょっと美しく書ける。\nhash_or_array.each_with_index{ |(k, v), i| value, key = [v, k, i].compact p [key, value] }  まあ、これが美しいコードなのかは異論あるだろうけど、条件分岐が無いのが売りである。\n","date":"2018-10-18","permalink":"https://e9.github.io/posts/1539859215/","tags":null,"title":"配列と連想配列を同じループで回したい"},{"content":"指定回数ループしたいときがある。Rubyだとわかりやすく10.times { }と書ける。範囲オブジェクトを作って回す手もある。for i in 0..\u0026lt;10 { }みたいな。いまのはSwiftだけど。\nJavaScriptについてぐぐると[...Array(10)].forEach(()=\u0026gt;{ })というコードが見つかる。Array(10)だけだと値が無なので[...Array(10)]と、わざわざスプレッドするひと手間が加わっていて、やや黒魔術的だ。\n https://stackoverflow.com/a/37417004  だけどこれを、ターゲットをes5にしたTypeScriptで書くと途端に動かなくなる。[...Array(10)]がArray(10).slice()にトランスパイルされてしまうからだ。代わりにArray.from(Array(10))とかArray(10).fill()とかしてる人もいるけど、fromもfillもES6なので、だったらターゲットをes6にして[...Array(10)]を使えばよいのではと思う。\nということでArray.apply(null, {length: 10})というテクニックがあることを知った。\n https://stackoverflow.com/a/30452520 https://blog.scheakur.com/post/96000209437/javascriptで0からn-1までを要素にもつarrayを作成する方法  applyの第2引数がArray-like objectを要求するので{length: 10}を渡すことで要素が10個ある配列が生成されるらしい。2018年に書くコードではない気もするが。\n","date":"2018-09-28","permalink":"https://e9.github.io/posts/1538143080/","tags":null,"title":"forではないループ"},{"content":"RubyにもPythonにもloggerはある。loggerに重い処理を渡してしまった場合を考えよう。\nlogger.debug(long_time_method())  どういう状況だこれは。\nでは遅延評価されるオブジェクトを途中でデバッグ出力してるとしよう。これならありそう。\nquery = query.where(...) logger.debug(query.all()) query = query.where(...)  このとき本番環境ではdebugログが出力されないとしても、query.all()は実行されてしまう。Pythonだとこれを回避するのは難しい。\ndebugの行にログレベルを見るifを追加するとか、文字列化まで遅延評価されるクラスを間に挟むとか、苦しいアイデアがスタックオーバフローには書いてあった。\n https://stackoverflow.com/questions/4148790/lazy-logger-message-string-evaluation/22205835#22205835  一方、Rubyは簡単で、ブロックに入れて渡せばよい。\nlogger.debug { query.all() }  ","date":"2018-09-10","permalink":"https://e9.github.io/posts/1536581159/","tags":null,"title":"loggerに重い処理を渡すと"},{"content":"例えばこんなパッケージがあったとして。\npackage x func X() string { return \u0026quot;x\u0026quot; }  package x_test import ( \u0026quot;testing\u0026quot; \u0026quot;app/x\u0026quot; ) func TestX(t *testing.T) { if !assert(x.X(), \u0026quot;x\u0026quot;) { t.Fatal(\u0026quot;not x\u0026quot;) } } func assert(a string, b string) bool { return a == b }  assert関数を他のパッケージのテストでも使いたくなったとする。\nその場合、assertをAssertにしてimport x_testすれば他のパッケージからもx_test.Assertが使えるようになる。かと思いきやならない。\nもちろんpackage xの方に移して、x.Assertとすれば呼べる。当たり前だ。だけどテストでしか使わない関数がそこにいるのは気持ち悪い。\nどうするのがいいのかちょっと調べたところ、スタックオーバフローによれば*_testではない専用のパッケージを作ってそこに入れろと。\n https://stackoverflow.com/a/31794241  つまりこういうことか。\npackage x_test import ( \u0026quot;testing\u0026quot; \u0026quot;app/hogetest\u0026quot; ) func TestX(t *testing.T) { if !hogetest.Assert(x.X(), \u0026quot;x\u0026quot;) { t.Fatal(\u0026quot;not x\u0026quot;) } }  package hogetest func Assert(a string, b string) bool { return a == b }  ビルド時はhogetestをimportしなければいい。うーん、まあ、わかるけど、あまりすっきりとした気持ちにはならなかった。\n","date":"2018-09-04","permalink":"https://e9.github.io/posts/1536059641/","tags":null,"title":"テストでだけ使いたい共通関数はGolangの場合どこに置くのか"},{"content":"developをmasterに入れるときでも、masterをリリースブランチに入れるときでも、なんでもいいんだけど、2つのブランチの差分から、次に何がデプロイされるのかをだいたいで知りたいときがある。\n当然プルリクエストベースで開発しているはずなので、そういうときはマージコミットだけに注目すればよい。\ngit log --first-parent --merges --reverse --pretty='%s %b' origin/master..origin/develop  プルリクエストのマージコミットに余計なコメントを入れていると改行が入ってややこしいが、そんなところにコメント書いてる人は見たことが無いので大丈夫。\nこんな風に表示される。\nMerge pull request #1 from e9/second-branch second commit Merge pull request #2 from e9/third-branch third commit  これをコピーしてGitHubのイシューやプルリクエストに貼り付ければ#の部分がリンクになって都合がよい。\nだけど貼り付ける先がGitHubじゃないときもある。esaとかbacklogとか。そういうときはマークダウンでリンクにしてあげたい。#の数字を切り取るのは簡単だけど、レポジトリのURLを手に入れるのは大変なので、ここは横着してgit-openを使う。\n https://github.com/paulirish/git-open  git-openを入れたら下記でよい。\ngit log --first-parent --merges --reverse --pretty='%s %b' origin/master..origin/develop | while read line || [ -n \u0026quot;$line\u0026quot; ] do url=`echo $line | sed -e 's/^.*#\\([0-9]*\\).*$/\\1/' | BROWSER=echo xargs git open --issue origin` echo \u0026quot;- [$line]($url)\u0026quot; done  これでマークダウンのリンクになるので、どこにでも貼れる。\n- [Merge pull request #1 from e9/second-branch second commit](https://github.com/e9/xxx/issues/1) - [Merge pull request #2 from e9/third-branch third commit](https://github.com/e9/xxx/issues/2)  イシューへのリンクになっているけど、リダイレクトされるので大丈夫。\n","date":"2018-09-03","permalink":"https://e9.github.io/posts/1535977174/","tags":null,"title":"マージコミットだけの差分"},{"content":"マークダウンで書けるブログサービスの選択肢が少ないのでgithub.ioを使うことにした。 いまどきはJekyllよりHugoらしい。わりと簡単に作れた。こんな感じで。\nhugo new site blog cd blog git init git remote add origin git@github.com:e9/blog.git  空のディレクトリばかりなのでfirst commitの前に.gitkeepを置いておく。\nfor dir in `find . -not -path '*/\\.*' -not -name '.*' -type d`; do touch $dir/.gitkeep; done git add . git commit -m 'hugo new site'  テーマはダウンロードして直接置いてもいいけど、gitのsubmoduleにしておくのがスマートだろう。\ngit submodule add https://github.com/mismith0227/hugo_theme_pickles.git themes/pickles git add . git commit -m 'Add themes/pickles'  あとはpublicをgithub.ioのレポジトリのsubmoduleにして、publicに出力したファイルをpushするのがオーソドックスなやり方らしいんだけど、せっかくなんでCIサービスから自動でデプロイさせることにした。\nいまどきはgithubのプライベートレポジトリは作り放題だし、Circle CIは1コンテナだけなら無料で使える。\n.circleci/config.ymlはこんな感じ。あらかじめCircleCIの鍵をGitHubに登録しておく。\nversion: 2 jobs: build: branches: only: - master docker: - image: circleci/golang:stretch steps: - checkout - run: command: git submodule update --init --recursive - run: command: | git clone https://github.com/e9/e9.github.io.git public rm -rf public/* - run: command: | wget https://github.com/gohugoio/hugo/releases/download/v0.47.1/hugo_0.47.1_Linux-64bit.tar.gz tar xzf hugo_0.47.1_Linux-64bit.tar.gz ./hugo -v - run: environment: EMAIL: \u0026lt;\u0026gt; GIT_AUTHOR_NAME: CircleCI GIT_COMMITTER_NAME: CircleCI command: | cd public git add . git commit -m 'rebuilding site' git push origin master  .travis.ymlならこんな感じ。あらかじめ環境変数CI_USER_TOKENに値を入れておく。\nlanguage: go sudo: false dist: trusty before_install: - echo -e \u0026quot;machine github.com\\n login $CI_USER_TOKEN\u0026quot; \u0026gt; ~/.netrc install: - wget https://github.com/gohugoio/hugo/releases/download/v0.47.1/hugo_0.47.1_Linux-64bit.tar.gz - tar xzf hugo_0.47.1_Linux-64bit.tar.gz before_script: - git clone https://github.com/e9/e9.github.io.git public - rm -rf public/* script: - ./hugo -v deploy: provider: script script: (cd public \u0026amp;\u0026amp; git add . \u0026amp;\u0026amp; git commit -m 'rebuilding site' \u0026amp;\u0026amp; git push origin master) skip_cleanup: true on: branch: master  新しい記事を書くときにhugo new f.mdだとトップページに反映されなかった。hugo new d/f.mdとひとつ階層を切らないといけないようだ。\n","date":"2018-08-29","permalink":"https://e9.github.io/posts/1535546215/","tags":null,"title":"Hugoで記事を書くまで"},{"content":"$ bin/rails -v Rails 5.0.0.rc1  こういうモデルがあるとする。\nclass Apple \u0026lt; ApplicationRecord attr_accessor :y end  実装内容の良し悪しはさておき、下記を実行する。\nirb(main):001:0\u0026gt; apple = Apple.select(\u0026quot;1 as x\u0026quot;, \u0026quot;2 as y\u0026quot;).first irb(main):002:0\u0026gt; apple.x =\u0026gt; 1  ではapple.yには何が入っているか。\nirb(main):003:0\u0026gt; apple.y =\u0026gt; nil irb(main):004:0\u0026gt; apple.as_json =\u0026gt; {\u0026quot;id\u0026quot;=\u0026gt;nil, \u0026quot;x\u0026quot;=\u0026gt;1, \u0026quot;y\u0026quot;=\u0026gt;nil}  nilなのだ。attr_accessorの#yが優先されるらしい。SELECTした結果にアクセスするには[:y]とすればよい。\nirb(main):005:0\u0026gt; apple[:y] =\u0026gt; 2  attr_accessorをひとつ置いただけで、既存のコードが動かなくなる可能性をはらんでいる。というか、それでさっきハマったのだ。\nこのあとxとyにそれぞれ代入すると、さらにわけがわからない。\nirb(main):006:0\u0026gt; apple.x = 3 irb(main):007:0\u0026gt; apple.y = 4 irb(main):008:0\u0026gt; apple.as_json =\u0026gt; {\u0026quot;id\u0026quot;=\u0026gt;nil, \u0026quot;x\u0026quot;=\u0026gt;3, \u0026quot;y\u0026quot;=\u0026gt;4} irb(main):009:0\u0026gt; apple.x =\u0026gt; 3 irb(main):010:0\u0026gt; apple[:x] =\u0026gt; 3 irb(main):011:0\u0026gt; apple.y =\u0026gt; 4 irb(main):012:0\u0026gt; apple[:y] =\u0026gt; 1  動的言語は強力だが、ときに怖い。\n","date":"2016-05-19","permalink":"https://e9.github.io/posts/1463633653/","tags":null,"title":"ActiveRecordでattr_accessorとselectを併用すると"},{"content":"rails5でマイグレーションファイルを作成すると、rails5で作成された印がつくようになった。 （まだベータ版だけど）\nclass CreateApples \u0026lt; ActiveRecord::Migration[5.0] def change  この[5.0]というのは、ぱっと見るとrubyの（隠された）機能のように見えるが、実は違う。\n [https://github.com/rails/rails/commit/6940dc860c4b25bff2eded370f2af4316de15a30#diff-8d3c44120f7b67ff79e2fbe6a40d0ad6R492:title]  ActiveRecord::Migrationクラスに[]という名前のクラスメソッドが定義されており、そのメソッドが（別の）クラスを返すのだ。\n[1] pry(main)\u0026gt; ActiveRecord::Migration[5.0] =\u0026gt; ActiveRecord::Migration::Current  つまりこういうことだ。\nclass CreateApples \u0026lt; ActiveRecord::Migration.[](5.0)  もしくはこの方がわかりやすいか。\nclass CreateApples \u0026lt; ActiveRecord::Migration.send('[]', 5.0)  さすがrubyである。\n","date":"2016-03-21","permalink":"https://e9.github.io/posts/1458562442/","tags":null,"title":"Rails5のマイグレーションファイル"},{"content":"いつの間にかrailsのscaffoldで作成したコントローラがbefore_actionで変数を仕込むようになっていた。普段まったく使わないので気付かなかった。\n https://github.com/rails/rails/commit/339e4e80d514bd94fcb0e15689db43e5de83642a  class \u0026lt;%= controller_class_name %\u0026gt;Controller \u0026lt; ApplicationController before_action :set_\u0026lt;%= singular_table_name %\u0026gt;, except: [ :index, :new, :create ] private # Use callbacks to share common setup or constraints between actions. def set_\u0026lt;%= singular_table_name %\u0026gt; @\u0026lt;%= singular_table_name %\u0026gt; = \u0026lt;%= orm_class.find(class_name, \u0026quot;params[:id]\u0026quot;) %\u0026gt; end   Let the scaffold example use the \u0026ldquo;set shared record\u0026rdquo; pattern to explain callbacks\n だけどこれは経験的に知っていることなんだけど、before_actionで変数を代入すると見通しが悪くなるのだ。\n特に多人数で開発しているときに誰かがそれをやりだすと、before_actionに次ぐbefore_actionで、いったいどのアクションがどのbefore_actionを呼んでいるのか、わけがわからなくなる。\n同じことを考えてる人は結構いる。\n http://craftingruby.com/posts/2015/05/31/dont-use-before-action-to-load-data.html http://blog.thefrontiergroup.com.au/2014/02/before_action_an_anti_pattern/ http://jgaskins.org/blog/2014/08/25/better-alternative-to-rails-before_action-to-load-objects http://stackoverflow.com/questions/31442005/rails-set-locals-via-before-action-without-using-instance-variables  だからrailsオフィシャルがscaffoldでbefore_actionを使ってくるのには違和感がある。\nbooks#showで@bookが存在するのは自明、ということだろうか。\n開発の現場ではせめてそれだけを例外にして、変数のアサインは極力before_actionではやらないでほしいと思った次第。\n","date":"2016-02-29","permalink":"https://e9.github.io/posts/1456752673/","tags":null,"title":"before_actionで変数を代入する是非"},{"content":"そういえば学生のころ、私は書き起こしが趣味だったのでした。\n これちゃんとした挨拶するの？じゃあ一応、式典らしくちゃんとした挨拶しますね。\nみなさん卒業おめでとうございます。4年前をちょっと思い出してください。ひょっとしたら5、6年前の人いるかもしれないけど。\nたぶんみなさんはAO入試とか、一般入試とか、帰国とか、いろんな形で入ってきて、ワクワクドキドキしてたと思うんですね。で、いまみなさんの横にいるのは、たぶん友達だったり、ゼミ、研究会の仲間だったり、サークルの仲間だったと思うんですね。\nまあ、この4年間、ずいぶんいろんなことがあったと思いますけども、まずいま横にいる人を非常に大切にして社会人になってください。またバラバラになっちゃうんだけども、また仲間をつくってですね、ぜひSFCらしさを世の中に広めていってほしいと思います。\nたぶんこういうスピーチには何か贈る言葉を用意しなきゃいけないんだけど。昨日いろいろ考えて、かっこいい言葉をひとつ言うと「因習は闇を生み、輝ける星は混沌に宿す」これコピペだからね、大丈夫。\n「因習は闇を生む」ってのはよく言われますけども、最近見た映画の中でもそういった言葉が使われてました。それから「輝ける星は混沌に宿す」というのは、ニーチェの言葉ですね。「ツァラトゥストラはかく語りき」の中に出てくる言葉です。因習っていうのは伝統とか慣習、トラディションですね。そういったものはネガティブな要素があると。闇を生むっていうことをみなさん自覚してほしいです。\n私は数学を教えたんだけども、数学の命題、最初にみなさん習ったと思うけど、対偶って覚えてます？覚えてる？闇の否定は光で、因習の否定はカオス、混沌ですよね。だから「輝ける星は混沌に宿す」というのは、最初に言った「因習は闇を生む」のまったく同じ意味です。\n私はみなさんに輝ける星になってほしいと思ってます。ということはどういうことが大事かというと、カオスの中に、混沌の中にみなさんはいてほしい。で、最初に、4年前を思い出してもらったのは、4年前みなさんはたぶん混沌としてたと思うんですね。SFCでどう過ごしたらいいか。自分は何をしようかと。非常に混沌の中にあったと思うんです。\nでもいまみなさんは、もう因習の中に足を踏み入れてると思う。ね。それを自覚ほしいです。これから社会に出てって、たぶん大手の会社とか、非常にいいところに就職した人は、もっと因習の中に入っていくと思います。そういう人はたぶん輝ける星になれない。ね。ほんとほんと。\nだから私が言いたいのは、もし人生でこれから選択することがあったら、右へ行こうか左へ行こうか、そういう時があったらば、ぜひ、混沌の方、カオスのある方を選んでください。それはもう失敗かもしれないし、損になるかもしれない。でも、みなさんが輝ける星になるには、混沌とした方をぜひ選んでほしい。\n私が贈る言葉は以上です。卒業おめでとうございます。\n ","date":"2014-04-20","permalink":"https://e9.github.io/posts/1397961646/","tags":null,"title":"河添学部長がSFCの卒業式で浴びせた冷や水"},{"content":"rails4のroutes.rbで\nresources :books, param: :name  とやると/books/:nameでアクセスできるようになる。でもその状態で\nform_for Book.find(1)  とかやってもformのactionは/books/1のまま。\nclass Book \u0026lt; ActiveRecord::Base def to_param name end end  を追加すればいいだけなんだけど冗長な気がした。\n","date":"2014-03-26","permalink":"https://e9.github.io/posts/1395825098/","tags":null,"title":"rails4の感想"},{"content":"クラウドで将棋の局面図を提供するサイトをつくりました。\n http://shogipic.jp  ひっそりこっそりリリースしたら数日後に若島さんに使ってもらえたのでだいぶ満足しました。\n http://twitter.com/propara/status/230633209719844864  もういつ閉鎖してもいいです。嘘です。閉鎖はしないです。\n将棋ブログでも取り上げていただきました。ありがとうございます。\n  http://clickshogi.exblog.jp/16566340/\n  http://d.hatena.ne.jp/hokaze153/20120805/1344146598\n  最終手を強調表示する機能を追加しました。詰将棋の出題には不要なので省いてました。\n\u0026ldquo;Done is better than perfect.\u0026ldquo;の精神でやっています。今後もよろしくお願いします。\n","date":"2012-08-08","permalink":"https://e9.github.io/posts/1344412089/","tags":null,"title":"ニッチな将棋のウェブサービスつくりました"},{"content":"YouTubeで見たジェイク・シマブクロの発言がオシャレだった。\n マイナーコードの中にも特に悲しい音がある\nベートーベンはDマイナーが一番悲しい音だと言っていた\nDマイナーに限らずDの音は全般的に人の心に訴える力があるね\n高校の成績はDが多かった\nいい面もある\nだからミュージシャンはDをよく取るのかな\n  http://www.youtube.com/watch?v=MJ4NxmawgzI  ","date":"2012-07-22","permalink":"https://e9.github.io/posts/1342967909/","tags":null,"title":"ミュージシャンジョーク"},{"content":"Lionにマウス挿してホイール使ったら、スクロール方向がWindowsと逆になってて面食らった。\n環境設定からホイールのスクロール方向を逆にしたら治ったけど、今度はそれに連動してトラックパッドのスクロール方向が今までの逆になった。\nマウスとトラックパッドのスクロール方向を別々にはできないらしい。\n適当なソフト使えば改善できるらしいけど、それくらいは標準で対応しておいてほしいよ。\n","date":"2012-07-21","permalink":"https://e9.github.io/posts/1342870825/","tags":null,"title":"Mac OS X Lionのスクロール方向に今更はまる"},{"content":"最近はバラエティ番組を見てると、スポンサーをアナウンスする場面で、後ろに映ってる出演者の着てるＴシャツのロゴとか、名札とか、とにかく文字すべてにモザイクがかかってることに気付く。\n http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1432189114 http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1232100427  まあ、普通に考えたらテロップとかぶって邪魔だから消してるんだろうけど、さっきガキの使いを見てたらテロップの出てないところでも文字にモザイクがかけられていて、あれ？と思った。\n CMってチャンネル変えるタイミングの上位ですので、またいでも見てもらうため敢えて興味をそそるようにしているんです。\n  http://okwave.jp/qa/q5615956.html\n さすがにそれは無いだろと思うんだけど。\n文字へのモザイクがけが自動化されていて、提供テロップが入りそうな場面では勝手にモザイクがかかっちゃうのかなあ。\n","date":"2012-07-15","permalink":"https://e9.github.io/posts/1342363851/","tags":null,"title":"CM前にやたらモザイクがかかる謎"},{"content":"よく見るのはこれ。\n(function(){})();  JSLintはカッコを中に入れろというらしい\n(function(){}());  knockout.jsでは初めの書き方と次の書き方が混在してる。\n!function(){}();  値を返さない即時関数はこれでバイト数を削減しようってことかな。\n","date":"2012-07-14","permalink":"https://e9.github.io/posts/1342194237/","tags":null,"title":"JavaScriptの即時関数パターンの書き方"},{"content":"ホームレスになりたいというわけではない。\n先週末に熊本に行き、そこでJR水前寺駅というものを見たのだ。\n 直営駅で、みどりの窓口が設置されている。駅舎には美容室などの商業施設、3階以上にはマンションを併設している。改札口やみどりの窓口、キヨスクなど駅機能は2階にある。\n  http://ja.wikipedia.org/wiki/%E6%B0%B4%E5%89%8D%E5%AF%BA%E9%A7%85\n 駅の上にマンションが建ってる。徒歩何分というレベルではない。改札を抜けたらもう我が家だ。さすがにそれは言い過ぎだけど。\nこれを見て、都内でも同じことができないか考えて、すこし検索したけどあまり出てこなかった。都民は駅に住みたくないのか？\n http://www.goodrooms.jp//sch/detail.php/001/693406/?k_number=693406\u0026amp;div=001 http://www.mansion-catalog.com/minamiaoyama/ http://www.m-standard.co.jp/rent/%E3%82%A2%E3%82%AF%E3%82%B7%E3%82%A2%E9%BA%BB%E5%B8%83/  （当たり前だけど）家賃が高かったり、駅上じゃなくて駅直結だったり、いまいち決定打に欠けるので、いつか暇なときに都内の駅の上を全て見てまわりたいと思う。\n","date":"2012-06-20","permalink":"https://e9.github.io/posts/1340200656/","tags":null,"title":"わたしは駅に住みたい"},{"content":"ブログに書きたいことは、つまり人に話したいことだから、ブログをどんどん書くと、いざ人に会ったときに話すことがなくなってしまう。\n「ねえねえ聞いてよこの前さあ――あ、ごめん、この話はブログに書いたんだった」\nお前のブログなんて誰も読んでねーよと言われるだろうけど、でもそうは言ってもインターネットで（一応は）全世界に向けて発信した話を、もう一度誰かにするのは気が引ける。\n別に誰かに話したいわけでもない話をブログに書くのも、それはそれでなんのために書いてるんだか分からないし。\nそこでひとつ思いついたのが「続きはリアルで」だ。\nブログには途中まで書いておいて、肝心の部分は実際に会ったときに話す。これでブログも書けるし、話題も尽きない。\nこれ、かなり画期的な手法だろうと思ったけど、300年以上前にフェルマーがやってた。\n","date":"2012-05-28","permalink":"https://e9.github.io/posts/1338214914/","tags":null,"title":"私がブログを書けない100の理由"},{"content":"ブログを始めたときに、ひとつめの記事に何を書くかというのは、すごく面倒な問題だ。\n","date":"2012-04-01","permalink":"https://e9.github.io/posts/1333213257/","tags":null,"title":"ブログデビュー"}]