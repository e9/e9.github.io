<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on e9.github.io</title>
    <link>https://e9.github.io/posts/</link>
    <description>Recent content in Posts on e9.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 04 Sep 2018 20:14:01 +0900</lastBuildDate>
    
	<atom:link href="https://e9.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>テストでだけ使いたい共通関数はGolangの場合どこに置くのか</title>
      <link>https://e9.github.io/posts/1536059641/</link>
      <pubDate>Tue, 04 Sep 2018 20:14:01 +0900</pubDate>
      
      <guid>https://e9.github.io/posts/1536059641/</guid>
      <description>例えばこんなパッケージがあったとして。
package x func X() string { return &amp;quot;x&amp;quot; }  package x_test import ( &amp;quot;testing&amp;quot; &amp;quot;app/x&amp;quot; ) func TestX(t *testing.T) { if !assert(x.X(), &amp;quot;x&amp;quot;) { t.Fatal(&amp;quot;not x&amp;quot;) } } func assert(a string, b string) bool { return a == b }  assert関数を他のパッケージのテストでも使いたくなったとする。
その場合、assertをAssertにしてimport x_testすれば他のパッケージからもx_test.Assertが使えるようになる。かと思いきやならない。
もちろんpackage xの方に移して、x.Assertとすれば呼べる。当たり前だ。だけどテストでしか使わない関数がそこにいるのは気持ち悪い。
どうするのがいいのかちょっと調べたところ、スタックオーバフローによれば*_testではない専用のパッケージを作ってそこに入れろと。
 https://stackoverflow.com/a/31794241  つまりこういうことか。
package x_test import ( &amp;quot;testing&amp;quot; &amp;quot;app/hogetest&amp;quot; ) func TestX(t *testing.T) { if !hogetest.Assert(x.X(), &amp;quot;x&amp;quot;) { t.Fatal(&amp;quot;not x&amp;quot;) } }  package hogetest func Assert(a string, b string) bool { return a == b }  ビルド時はhogetestをimportしなければいい。うーん、まあ、わかるけど、あまりすっきりとした気持ちにはならなかった。</description>
    </item>
    
    <item>
      <title>マージコミットだけの差分</title>
      <link>https://e9.github.io/posts/1535977174/</link>
      <pubDate>Mon, 03 Sep 2018 21:19:34 +0900</pubDate>
      
      <guid>https://e9.github.io/posts/1535977174/</guid>
      <description>developをmasterに入れるときでも、masterをリリースブランチに入れるときでも、なんでもいいんだけど、2つのブランチの差分から、次に何がデプロイされるのかをだいたいで知りたいときがある。
当然プルリクエストベースで開発しているはずなので、そういうときはマージコミットだけに注目すればよい。
git log --first-parent --merges --reverse --pretty=&#39;%s %b&#39; origin/master..origin/develop  プルリクエストのマージコミットに余計なコメントを入れていると改行が入ってややこしいが、そんなところにコメント書いてる人は見たことが無いので大丈夫。
こんな風に表示される。
Merge pull request #1 from e9/second-branch second commit Merge pull request #2 from e9/third-branch third commit  これをコピーしてGitHubのイシューやプルリクエストに貼り付ければ#の部分がリンクになって都合がよい。
だけど貼り付ける先がGitHubじゃないときもある。esaとかbacklogとか。そういうときはマークダウンでリンクにしてあげたい。#の数字を切り取るのは簡単だけど、レポジトリのURLを手に入れるのは大変なので、ここは横着してgit-openを使う。
 https://github.com/paulirish/git-open  git-openを入れたら下記でよい。
git log --first-parent --merges --reverse --pretty=&#39;%s %b&#39; origin/master..origin/develop | while read line || [ -n &amp;quot;$line&amp;quot; ] do url=`echo $line | sed -e &#39;s/^.*#\([0-9]*\).*$/\1/&#39; | BROWSER=echo xargs git open --issue origin` echo &amp;quot;- [$line]($url)&amp;quot; done  これでマークダウンのリンクになるので、どこにでも貼れる。</description>
    </item>
    
    <item>
      <title>Hugoで記事を書くまで</title>
      <link>https://e9.github.io/posts/1535546215/</link>
      <pubDate>Wed, 29 Aug 2018 21:36:55 +0900</pubDate>
      
      <guid>https://e9.github.io/posts/1535546215/</guid>
      <description>マークダウンで書けるブログサービスの選択肢が少ないのでgithub.ioを使うことにした。 いまどきはJekyllよりHugoらしい。わりと簡単に作れた。こんな感じで。
hugo new site blog cd blog git init git remote add origin git@github.com:e9/blog.git  空のディレクトリばかりなのでfirst commitの前に.gitkeepを置いておく。
for dir in `find . -not -path &#39;*/\.*&#39; -not -name &#39;.*&#39; -type d`; do touch $dir/.gitkeep; done git add . git commit -m &#39;hugo new site&#39;  テーマはダウンロードして直接置いてもいいけど、gitのsubmoduleにしておくのがスマートだろう。
git submodule add https://github.com/mismith0227/hugo_theme_pickles.git themes/pickles git add . git commit -m &#39;Add themes/pickles&#39;  あとはpublicをgithub.ioのレポジトリのsubmoduleにして、publicに出力したファイルをpushするのがオーソドックスなやり方らしいんだけど、せっかくなんでCIサービスから自動でデプロイさせることにした。
いまどきはgithubのプライベートレポジトリは作り放題だし、Circle CIは1コンテナだけなら無料で使える。
.circleci/config.ymlはこんな感じ。あらかじめCircleCIの鍵をGitHubに登録しておく。
version: 2 jobs: build: branches: only: - master docker: - image: circleci/golang:stretch steps: - checkout - run: command: git submodule update --init --recursive - run: command: | git clone https://github.</description>
    </item>
    
  </channel>
</rss>