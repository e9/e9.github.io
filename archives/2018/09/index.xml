<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2018/09 on e9.github.io</title>
    <link>https://e9.github.io/archives/2018/09/</link>
    <description>Recent content in 2018/09 on e9.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://e9.github.io/archives/2018/09/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>forではないループ</title>
      <link>https://e9.github.io/posts/1538143080/</link>
      <pubDate>Fri, 28 Sep 2018 22:58:00 +0900</pubDate>
      
      <guid>https://e9.github.io/posts/1538143080/</guid>
      <description>指定回数ループしたいときがある。Rubyだとわかりやすく10.times { }と書ける。範囲オブジェクトを作って回す手もある。for i in 0.</description>
    </item>
    
    <item>
      <title>loggerに重い処理を渡すと</title>
      <link>https://e9.github.io/posts/1536581159/</link>
      <pubDate>Mon, 10 Sep 2018 21:06:00 +0900</pubDate>
      
      <guid>https://e9.github.io/posts/1536581159/</guid>
      <description>RubyにもPythonにもloggerはある。loggerに重い処理を渡してしまった場合を考えよう。
logger.debug(long_time_method())  どういう状況だこれは。</description>
    </item>
    
    <item>
      <title>テストでだけ使いたい共通関数はGolangの場合どこに置くのか</title>
      <link>https://e9.github.io/posts/1536059641/</link>
      <pubDate>Tue, 04 Sep 2018 20:14:01 +0900</pubDate>
      
      <guid>https://e9.github.io/posts/1536059641/</guid>
      <description>例えばこんなパッケージがあったとして。
package x func X() string { return &amp;quot;x&amp;quot; }  package x_test import ( &amp;quot;testing&amp;quot; &amp;quot;app/x&amp;quot; ) func TestX(t *testing.</description>
    </item>
    
    <item>
      <title>マージコミットだけの差分</title>
      <link>https://e9.github.io/posts/1535977174/</link>
      <pubDate>Mon, 03 Sep 2018 21:19:34 +0900</pubDate>
      
      <guid>https://e9.github.io/posts/1535977174/</guid>
      <description>developをmasterに入れるときでも、masterをリリースブランチに入れるときでも、なんでもいいんだけど、2つのブランチの差分から、次に何がデプロイされるのかをだいたいで知りたいときがある。
当然プルリクエストベースで開発しているはずなので、そういうときはマージコミットだけに注目すればよい。
git log --first-parent --merges --reverse --pretty=&#39;%s %b&#39; origin/master.</description>
    </item>
    
  </channel>
</rss>